{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Candy Memory Game</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            background-color: #f8f9fa;\n            color: #333;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            height: 100vh;\n            margin: 0;\n        }\n\n        .container {\n            text-align: center;\n        }\n\n        input {\n            padding: 10px;\n            border-radius: 5px;\n            border: 1px solid #ccc;\n            margin-bottom: 10px;\n        }\n\n        button {\n            padding: 10px 20px;\n            border-radius: 5px;\n            border: none;\n            background-color: #ff6f61;\n            color: white;\n            cursor: pointer;\n            margin: 5px;\n        }\n\n        button:hover {\n            background-color: #ff4f3d;\n        }\n\n        .game-board {\n            display: grid;\n            gap: 10px;\n            margin: 20px auto;\n            justify-content: center;\n        }\n\n        .card {\n            width: 80px;\n            height: 80px;\n            background-color: #ffcccb;\n            border-radius: 10px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 2em;\n            cursor: pointer;\n            transition: transform 0.3s;\n        }\n\n        .card.flipped {\n            transform: rotateY(180deg);\n            background-color: #fff;\n        }\n\n        .card.matched {\n            background-color: #90ee90;\n            pointer-events: none;\n        }\n\n        #level-display, #timer, #message {\n            margin: 10px 0;\n        }\n\n        #leaderboard-list {\n            list-style-type: none;\n            padding: 0;\n        }\n\n        #leaderboard {\n            display: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Candy Crush Memory Game</h1>\n        <input type=\"text\" id=\"player-name\" placeholder=\"Enter your name\" />\n        <button id=\"start-button\">Start Game</button>\n        <button id=\"restart-button\" style=\"display: none;\">Restart Game</button>\n        <div id=\"level-display\">Level: 1</div>\n        <div id=\"timer\">Time left: 30 seconds</div>\n        <div id=\"message\"></div>\n        <div id=\"game-board\" class=\"game-board\"></div>\n        <h2>Leaderboard</h2>\n        <ul id=\"leaderboard-list\"></ul>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "let cardValues = [];\nlet cardElements = [];\nlet flippedCards = [];\nlet matchedPairs = 0;\nlet totalPairs = 6; // Set to 6 pairs for level 1\nlet timer;\nlet timeLeft;\nlet playerName = '';\nlet currentLevel = 1;\nlet leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];\n\n// Generate card values based on the level\nfunction generateCardValues(pairsPerLevel) {\n    const values = [];\n    const candies = ['üç¨', 'üç≠', 'üç´', 'üç©', 'üç™', 'üç∞', 'üç¶', 'üçß', 'üç®', 'üç°']; // Candy-themed emojis\n\n    for (let i = 0; i < pairsPerLevel; i++) {\n        values.push(candies[i % candies.length], candies[i % candies.length]); // Create pairs\n    }\n\n    return values;\n}\n\n// Start the game\nfunction startGame() {\n    playerName = document.getElementById('player-name').value.trim() || 'Player'; // Use 'Player' if name is empty\n    document.getElementById('start-button').style.display = 'none';\n    document.getElementById('restart-button').style.display = 'inline-block';\n    document.getElementById('message').innerText = '';\n    document.getElementById('level-display').innerText = `Level: ${currentLevel}`;\n    matchedPairs = 0;\n    timeLeft = 30; // Start with 30 seconds\n    cardValues = generateCardValues(totalPairs);\n    cardValues = shuffle(cardValues);\n    createCards();\n    startTimer();\n}\n\n// Create card elements\nfunction createCards() {\n    const gameBoard = document.getElementById('game-board');\n    gameBoard.innerHTML = ''; // Clear the board\n    const gridSize = Math.ceil(Math.sqrt(totalPairs * 2)); // Calculate grid size\n    gameBoard.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`; // Set column count\n\n    // Generate cards with values\n    cardElements = [];\n    cardValues.forEach((value, index) => {\n        const card = document.createElement('div');\n        card.classList.add('card');\n        card.setAttribute('data-value', value);\n        card.addEventListener('click', flipCard);\n        gameBoard.appendChild(card);\n        cardElements.push(card);\n    });\n}\n\n// Flip card function\nfunction flipCard() {\n    if (flippedCards.length < 2 && !this.classList.contains('flipped')) {\n        this.classList.add('flipped');\n        this.innerText = this.getAttribute('data-value');\n        flippedCards.push(this);\n\n        if (flippedCards.length === 2) {\n            setTimeout(checkMatch, 1000);\n        }\n    }\n}\n\n// Check for a match\nfunction checkMatch() {\n    const [firstCard, secondCard] = flippedCards;\n\n    if (firstCard.getAttribute('data-value') === secondCard.getAttribute('data-value')) {\n        matchedPairs++;\n        firstCard.classList.add('matched');\n        secondCard.classList.add('matched');\n        if (matchedPairs === totalPairs) {\n            clearInterval(timer);\n            document.getElementById('message').innerText = 'You won this level! üéâ';\n            recordScore();\n            setTimeout(nextLevel, 2000); // Move to the next level after 2 seconds\n        }\n    } else {\n        firstCard.classList.remove('flipped');\n        firstCard.innerText = '';\n        secondCard.classList.remove('flipped');\n        secondCard.innerText = '';\n    }\n\n    flippedCards = [];\n}\n\n// Start the timer\nfunction startTimer() {\n    document.getElementById('timer').innerText = `Time left: ${timeLeft} seconds`;\n    timer = setInterval(() => {\n        timeLeft--;\n        document.getElementById('timer').innerText = `Time left: ${timeLeft} seconds`;\n\n        if (timeLeft <= 0) {\n            clearInterval(timer);\n            document.getElementById('message').innerText = 'Time is up! You lost! üò¢';\n            disableCards();\n        }\n    }, 1000);\n}\n\n// Disable cards after game over\nfunction disableCards() {\n    cardElements.forEach(card => {\n        card.removeEventListener('click', flipCard);\n    });\n}\n\n// Shuffle function\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\n// Record score in localStorage\nfunction recordScore() {\n    const score = timeLeft; // Score is based on time left\n    leaderboard.push({ name: playerName, score: score });\n    leaderboard.sort((a, b) => b.score - a.score); // Sort by score (descending)\n    leaderboard = leaderboard.slice(0, 10); // Keep top 10 scores\n    localStorage.setItem('leaderboard', JSON.stringify(leaderboard));\n    updateLeaderboard();\n}\n\n// Update the leaderboard display\nfunction updateLeaderboard() {\n    const leaderboardList = document.getElementById('leaderboard-list');\n    leaderboardList.innerHTML = ''; // Clear previous leaderboard\n\n    leaderboard.forEach(entry => {\n        const listItem = document.createElement('li');\n        listItem.innerText = `${entry.name}: ${entry.score} seconds`;\n        leaderboardList.appendChild(listItem);\n    });\n}\n\n// Move to the next level\nfunction nextLevel() {\n    currentLevel++;\n    totalPairs += 2; // Increase pairs for the next level\n    timeLeft = Math.max(30, timeLeft + 10); // Add more time per level, minimum 30 seconds\n    document.getElementById('level-display').innerText = `Level: ${currentLevel}`;\n    document.getElementById('game-board').innerHTML = ''; // Clear the game board\n    matchedPairs = 0; // Reset matched pairs\n    cardValues = generateCardValues(totalPairs); // Generate new card values\n    cardValues = shuffle(cardValues);\n    createCards();\n    startTimer();\n}\n\n// Restart the game\ndocument.getElementById('restart-button').addEventListener('click', () => {\n    document.getElementById('restart-button').style.display = 'none';\n    document.getElementById('start-button').style.display = 'inline-block';\n    localStorage.removeItem('leaderboard'); // Clear leaderboard on restart\n    leaderboard = []; // Reset leaderboard array\n    document.getElementById('leaderboard-list').innerHTML = ''; // Clear leaderboard display\n    currentLevel = 1; // Reset level\n    totalPairs = 6; // Reset pairs for level 1\n    startGame(); // Start a new game immediately after restart\n});\n\n// Event listener for the start button\ndocument.getElementById('start-button').addEventListener('click', startGame);\n\n// Initialize leaderboard display on page load\nupdateLeaderboard();\n",
      "status": "[-]",
      "output": "<p class=\"error\">Failed to read the 'localStorage' property from 'Window': The document is sandboxed and lacks the 'allow-same-origin' flag.</p>",
      "type": "code"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}